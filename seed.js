const { PrismaClient } = require('@prisma/client')

const prisma = new PrismaClient()

async function seed() {
  console.log('üå± –î–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–µ—Å—Ç–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö...')
  
  try {
    // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–µ–¥–º–µ—Ç—ñ–≤
    const subjects = [
      { name: '–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞' },
      { name: '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ –º–æ–≤–∞' },
      { name: '–ê–Ω–≥–ª—ñ–π—Å—å–∫–∞ –º–æ–≤–∞' },
      { name: '–Ü—Å—Ç–æ—Ä—ñ—è –£–∫—Ä–∞—ó–Ω–∏' },
      { name: '–§—ñ–∑–∏–∫–∞' },
      { name: '–•—ñ–º—ñ—è' },
      { name: '–ë—ñ–æ–ª–æ–≥—ñ—è' },
      { name: '–ì–µ–æ–≥—Ä–∞—Ñ—ñ—è' },
      { name: '–§—ñ–∑–∏—á–Ω–∞ –∫—É–ª—å—Ç—É—Ä–∞' },
      { name: '–Ü–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞' }
    ]
    
    for (const subject of subjects) {
      await prisma.subject.upsert({
        where: { name: subject.name },
        update: {},
        create: subject
      })
    }
    console.log('üìö –ü—Ä–µ–¥–º–µ—Ç–∏ —Å—Ç–≤–æ—Ä–µ–Ω—ñ')
    
    // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª–∞—Å—ñ–≤
    const classes = [
      { name: '5-–ê', description: '–ü\'—è—Ç–∏–π –∫–ª–∞—Å –ê' },
      { name: '5-–ë', description: '–ü\'—è—Ç–∏–π –∫–ª–∞—Å –ë' },
      { name: '6-–ê', description: '–®–æ—Å—Ç–∏–π –∫–ª–∞—Å –ê' },
      { name: '6-–ë', description: '–®–æ—Å—Ç–∏–π –∫–ª–∞—Å –ë' },
      { name: '7-–ê', description: '–°—å–æ–º–∏–π –∫–ª–∞—Å –ê' },
      { name: '8-–ê', description: '–í–æ—Å—å–º–∏–π –∫–ª–∞—Å –ê' },
      { name: '9-–ê', description: '–î–µ–≤\'—è—Ç–∏–π –∫–ª–∞—Å –ê' },
      { name: '10-–ê', description: '–î–µ—Å—è—Ç–∏–π –∫–ª–∞—Å –ê' },
      { name: '11-–ê', description: '–û–¥–∏–Ω–∞–¥—Ü—è—Ç–∏–π –∫–ª–∞—Å –ê' }
    ]
    
    for (const classData of classes) {
      await prisma.class.upsert({
        where: { name: classData.name },
        update: {},
        create: classData
      })
    }
    console.log('üèõÔ∏è –ö–ª–∞—Å–∏ —Å—Ç–≤–æ—Ä–µ–Ω—ñ')
    
    // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–∏–∫–ª–∞–¥—É —Ä–æ–∑–∫–ª–∞–¥—É –¥–ª—è 5-–ê –∫–ª–∞—Å—É
    const fifthAClass = await prisma.class.findUnique({
      where: { name: '5-–ê' }
    })
    
    const mathSubject = await prisma.subject.findUnique({
      where: { name: '–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞' }
    })
    
    const ukrainianSubject = await prisma.subject.findUnique({
      where: { name: '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ –º–æ–≤–∞' }
    })
    
    if (fifthAClass && mathSubject && ukrainianSubject) {
      // –ü–æ–Ω–µ–¥—ñ–ª–æ–∫
      await prisma.schedule.upsert({
        where: {
          classId_dayOfWeek_startTime: {
            classId: fifthAClass.id,
            dayOfWeek: 1,
            startTime: '08:00'
          }
        },
        update: {},
        create: {
          classId: fifthAClass.id,
          subjectId: mathSubject.id,
          dayOfWeek: 1, // –ü–æ–Ω–µ–¥—ñ–ª–æ–∫
          startTime: '08:00',
          endTime: '08:45'
        }
      })
      
      await prisma.schedule.upsert({
        where: {
          classId_dayOfWeek_startTime: {
            classId: fifthAClass.id,
            dayOfWeek: 1,
            startTime: '09:00'
          }
        },
        update: {},
        create: {
          classId: fifthAClass.id,
          subjectId: ukrainianSubject.id,
          dayOfWeek: 1, // –ü–æ–Ω–µ–¥—ñ–ª–æ–∫
          startTime: '09:00',
          endTime: '09:45'
        }
      })
      
      console.log('üìÖ –ü—Ä–∏–∫–ª–∞–¥ —Ä–æ–∑–∫–ª–∞–¥—É —Å—Ç–≤–æ—Ä–µ–Ω–∏–π')
    }
    
    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ –¥–æ–¥–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ!')
    
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞:', error.message)
  } finally {
    await prisma.$disconnect()
  }
}

seed()